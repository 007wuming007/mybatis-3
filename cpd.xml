<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="68" tokens="489">
<file line="50" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/CglibSerialStateHolder.java"/>
<file line="50" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/JavassistSerialStateHolder.java"/>
<codefragment>
<![CDATA[
  public CglibSerialStateHolder(
      final Object userBean, 
      final Set<String> unloadedProperties,
      final ObjectFactory objectFactory, 
      List<Class<?>> constructorArgTypes, 
      List<Object> constructorArgs) {
    this.userBean = userBean;
    this.unloadedProperties = unloadedProperties.toArray(new String[unloadedProperties.size()]);
    this.objectFactory = objectFactory;
    this.constructorArgTypes = constructorArgTypes.toArray(new Class[constructorArgTypes.size()]);
    this.constructorArgs = constructorArgs.toArray(new Object[constructorArgs.size()]);
  }

  public void writeExternal(final ObjectOutput out) throws IOException {
    boolean firstRound = false;
    final ByteArrayOutputStream baos = new ByteArrayOutputStream();
    ObjectOutputStream os = stream.get();
    if (os == null) {
      os = new ObjectOutputStream(baos);
      firstRound = true;
      stream.set(os);
    }

    os.writeObject(this.userBean);
    os.writeObject(this.unloadedProperties);
    os.writeObject(this.objectFactory);
    os.writeObject(this.constructorArgTypes);
    os.writeObject(this.constructorArgs);

    final byte[] bytes = baos.toByteArray();
    out.writeObject(bytes);

    if (firstRound) stream.remove();
  }

  public void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException {
    final Object data = in.readObject();
    if (data.getClass().isArray()) {
      this.userBeanBytes = (byte[]) data;
    } else {
      this.userBean = data;
    }
  }

  protected Object readResolve() throws ObjectStreamException {
    /* Second run */
    if (this.userBean != null && this.userBeanBytes.length == 0) {
      return this.userBean;
    }

    /* First run */
    try {
      final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(this.userBeanBytes));
      this.userBean = in.readObject();
      this.unloadedProperties = (String[]) in.readObject();
      this.objectFactory = (ObjectFactory) in.readObject();
      this.constructorArgTypes = (Class<?>[]) in.readObject();
      this.constructorArgs = (Object[]) in.readObject();
    } catch (final IOException ex) {
      throw (ObjectStreamException) new StreamCorruptedException().initCause(ex);
    } catch (final ClassNotFoundException ex) {
      throw (ObjectStreamException) new InvalidClassException(ex.getLocalizedMessage()).initCause(ex);
    }

    Set<String> arrayProps = new HashSet<String>(Arrays.asList(this.unloadedProperties));
    List<Class<?>> arrayTypes = Arrays.asList(this.constructorArgTypes);
    List<Object> arrayValues = Arrays.asList(this.constructorArgs);
    return new CglibProxyFactory().createDeserializationProxy(userBean, arrayProps, objectFactory, arrayTypes, arrayValues);
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="231">
<file line="25" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/type/ClobTypeHandler.java"/>
<file line="25" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/type/NClobTypeHandler.java"/>
<codefragment>
<![CDATA[
public class ClobTypeHandler extends BaseTypeHandler<String> {

  @Override
  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)
      throws SQLException {
    StringReader reader = new StringReader(parameter);
    ps.setCharacterStream(i, reader, parameter.length());
  }

  @Override
  public String getNullableResult(ResultSet rs, String columnName)
      throws SQLException {
    String value = "";
    Clob clob = rs.getClob(columnName);
    if (clob != null) {
      int size = (int) clob.length();
      value = clob.getSubString(1, size);
    }
    return value;
  }

  @Override
  public String getNullableResult(ResultSet rs, int columnIndex)
      throws SQLException {
    String value = "";
    Clob clob = rs.getClob(columnIndex);
    if (clob != null) {
      int size = (int) clob.length();
      value = clob.getSubString(1, size);
    }
    return value;
  }

  @Override
  public String getNullableResult(CallableStatement cs, int columnIndex)
      throws SQLException {
    String value = "";
    Clob clob = cs.getClob(columnIndex);
    if (clob != null) {
      int size = (int) clob.length();
      value = clob.getSubString(1, size);
    }
    return value;
  }
}
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="212">
<file line="43" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java"/>
<file line="71" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java"/>
<codefragment>
<![CDATA[
    sql().SELECT_DISTINCT(columns);
  }

  public static void FROM(String table) {
    sql().FROM(table);
  }

  public static void JOIN(String join) {
    sql().JOIN(join);
  }

  public static void INNER_JOIN(String join) {
    sql().INNER_JOIN(join);
  }

  public static void LEFT_OUTER_JOIN(String join) {
    sql().LEFT_OUTER_JOIN(join);
  }

  public static void RIGHT_OUTER_JOIN(String join) {
    sql().RIGHT_OUTER_JOIN(join);
  }

  public static void OUTER_JOIN(String join) {
    sql().OUTER_JOIN(join);
  }

  public static void WHERE(String conditions) {
    sql().WHERE(conditions);
  }

  public static void OR() {
    sql().OR();
  }

  public static void AND() {
    sql().AND();
  }

  public static void GROUP_BY(String columns) {
    sql().GROUP_BY(columns);
  }

  public static void HAVING(String conditions) {
    sql().HAVING(conditions);
  }

  public static void ORDER_BY(String columns) {
    sql().ORDER_BY(columns);
  }
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="206">
<file line="89" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/CglibProxyFactory.java"/>
<file line="91" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
  private static class EnhancedResultObjectProxyImpl implements MethodInterceptor {
    private Class<?> type;
    private ResultLoaderMap lazyLoader;
    private boolean aggressive;
    private Set<String> lazyLoadTriggerMethods;
    private ObjectFactory objectFactory;
    private List<Class<?>> constructorArgTypes;
    private List<Object> constructorArgs;

    private EnhancedResultObjectProxyImpl(Class<?> type, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      this.type = type;
      this.lazyLoader = lazyLoader;
      this.aggressive = configuration.isAggressiveLazyLoading();
      this.lazyLoadTriggerMethods = configuration.getLazyLoadTriggerMethods();
      this.objectFactory = objectFactory;
      this.constructorArgTypes = constructorArgTypes;
      this.constructorArgs = constructorArgs;
    }

    public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      final Class<?> type = target.getClass();
      EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
      PropertyCopier.copyBeanProperties(type, target, enhanced);
      return enhanced;
    }

    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="180">
<file line="153" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/CglibProxyFactory.java"/>
<file line="155" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
  private static class EnhancedDeserializationProxyImpl implements MethodInterceptor {
    private Class<?> type;
    private Set<String> unloadedProperties;
    private ObjectFactory objectFactory;
    private List<Class<?>> constructorArgTypes;
    private List<Object> constructorArgs;

    private EnhancedDeserializationProxyImpl(Class<?> type, Set<String> unloadedProperties, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      this.type = type;
      this.unloadedProperties = unloadedProperties;
      this.objectFactory = objectFactory;
      this.constructorArgTypes = constructorArgTypes;
      this.constructorArgs = constructorArgs;
    }

    public static Object createProxy(Object target, Set<String> unloadedProperties, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      final Class<?> type = target.getClass();
      EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
      PropertyCopier.copyBeanProperties(type, target, enhanced);
      return enhanced;
    }

    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="138">
<file line="64" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java"/>
<file line="55" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java"/>
<codefragment>
<![CDATA[
      } else if ("getResultSet".equals(method.getName())) {
        ResultSet rs = (ResultSet) method.invoke(statement, params);
        if (rs != null) {
          return ResultSetLogger.newInstance(rs, getStatementLog());
        } else {
          return null;
        }
      } else if ("equals".equals(method.getName())) {
        Object ps = params[0];
        return ps instanceof Proxy && proxy == ps;
      } else if ("hashCode".equals(method.getName())) {
        return proxy.hashCode();
      } else {
        return method.invoke(statement, params);
      }
    } catch (Throwable t) {
      throw ExceptionUtil.unwrapThrowable(t);
    }
  }

  /*
   * Creates a logging version of a PreparedStatement
   *
   * @param stmt - the statement
   * @param sql  - the sql statement
   * @return - the proxy
   */
  public static PreparedStatement newInstance(PreparedStatement stmt, Log statementLog) {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="123">
<file line="50" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/CglibProxyFactory.java"/>
<file line="49" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
      throw new IllegalStateException("Cannot enable lazy loading because CGLIB is not available. Add CGLIB to your classpath.", e);
    }
  }
  
  public Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
    return EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
  }

  public Object createDeserializationProxy(Object target, Set<String> unloadedProperties, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
    return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
  }

  public void setProperties(Properties properties) {
  }

  private static Object crateProxy(Class<?> type, Callback callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="109">
<file line="26" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java"/>
<file line="45" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java"/>
<codefragment>
<![CDATA[
    log = LogFactory.getLog(clazz);
  }

  public boolean isDebugEnabled() {
    return log.isDebugEnabled();
  }

  public boolean isTraceEnabled() {
    return log.isTraceEnabled();
  }

  public void error(String s, Throwable e) {
    log.error(s, e);
  }

  public void error(String s) {
    log.error(s);
  }

  public void debug(String s) {
    log.debug(s);
  }

  public void trace(String s) {
    log.trace(s);
  }

  public void warn(String s) {
    log.warn(s);
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="108">
<file line="27" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java"/>
<file line="46" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java"/>
<file line="27" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java"/>
<codefragment>
<![CDATA[
  }

  public boolean isDebugEnabled() {
    return log.isDebugEnabled();
  }

  public boolean isTraceEnabled() {
    return log.isTraceEnabled();
  }

  public void error(String s, Throwable e) {
    log.error(s, e);
  }

  public void error(String s) {
    log.error(s);
  }

  public void debug(String s) {
    log.debug(s);
  }

  public void trace(String s) {
    log.trace(s);
  }

  public void warn(String s) {
    log.warn(s);
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="106">
<file line="129" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/CglibProxyFactory.java"/>
<file line="131" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
              return new CglibSerialStateHolder(original, lazyLoader.getPropertyNames(), objectFactory, constructorArgTypes, constructorArgs);
            } else {
              return original;
            }
          } else {
            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {
              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {
                lazyLoader.loadAll();
              } else if (PropertyNamer.isProperty(methodName)) {
                final String property = PropertyNamer.methodToProperty(methodName);
                if (lazyLoader.hasLoader(property)) {
                  lazyLoader.load(property);
                }
              }
            }
          }
        }
        return methodProxy.invokeSuper(enhanced, args);
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="106">
<file line="23" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/type/NStringTypeHandler.java"/>
<file line="23" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/type/StringTypeHandler.java"/>
<codefragment>
<![CDATA[
public class NStringTypeHandler extends BaseTypeHandler<String> {

  @Override
  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)
      throws SQLException {
//    ps.setNString(i, ((String) parameter));
    ps.setString(i, parameter);
  }

  @Override
  public String getNullableResult(ResultSet rs, String columnName)
      throws SQLException {
//    return rs.getNString(columnName);
    return rs.getString(columnName);
  }

  @Override
  public String getNullableResult(ResultSet rs, int columnIndex)
      throws SQLException {
    return rs.getString(columnIndex);
  }

  @Override
  public String getNullableResult(CallableStatement cs, int columnIndex)
      throws SQLException {
//    return cs.getNString(columnIndex);
    return cs.getString(columnIndex);
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="102">
<file line="35" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java"/>
<file line="35" path="/home/eduardo/git/mybatis-3/src/main/java/org/apache/ibatis/cache/decorators/WeakCache.java"/>
<codefragment>
<![CDATA[
  public SoftCache(Cache delegate) {
    this.delegate = delegate;
    this.numberOfHardLinks = 256;
    this.hardLinksToAvoidGarbageCollection = new LinkedList<Object>();
    this.queueOfGarbageCollectedEntries = new ReferenceQueue<Object>();
  }

  public String getId() {
    return delegate.getId();
  }

  public int getSize() {
    removeGarbageCollectedItems();
    return delegate.getSize();
  }

  public void setSize(int size) {
    this.numberOfHardLinks = size;
  }

  public void putObject(Object key, Object value) {
    removeGarbageCollectedItems();
    delegate.putObject(key, new SoftEntry(key, value, queueOfGarbageCollectedEntries));
]]>
</codefragment>
</duplication>
</pmd-cpd>